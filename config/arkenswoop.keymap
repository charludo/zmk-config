/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include "mouse.dtsi"
#include "combo.dtsi"
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        tap_shift: tap_shift {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_SHIFT";
            #binding-cells = <0>;
            bindings =
                <&kp LEFT_SHIFT>,
                <&caps_word>;
        };
        num_word: behavior_num_word {
            compatible = "zmk,behavior-caps-word";
            label = "NUM_WORD";
            #binding-cells = <0>;
            layers = <2>;
            continue-list = <BACKSPACE DELETE DOT COMMA ASTERISK LEFT_PAENTHESIS RIGHT_PARENTHESIS PLUS MINUS SLASH PERCENT UNDERSCORE COLON LEFT RIGHT>;
            ignore-numbers;
        };
        num_activate: num_activate {
            compatible = "zmk,behavior-hold-tap";
            label = "NUM_ACTIVATE";
            bindings =
                <&mo>,
                <&num_word>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            global-quick-tap;
        };
        tap_currency: tap_currency {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_CURRENCY";
            #binding-cells = <0>;
            bindings =
                <&kp DOLLAR>,
                <&kp RA(NUMBER_5)>;
        };
        confirm_bt_reset: confirm_bt_reset {
            compatible = "zmk,behavior-tap-dance";
            label = "CONFIRM_BT_RESET";
            #binding-cells = <0>;
            bindings =
                <&none>,
                <&none>,
                <&none>,
                <&none>,
                <&none>,
                <&none>,
                <&none>,
                <&none>,
                <&none>,
                <&bt BT_CLR>;
        };
    };

    combos {
        compatible = "zmk,combos";
    };

    macros {
        umlaut_a: umlaut_a {
            compatible = "zmk,behavior-macro";
            label = "UMLAUT_A";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp A>;
        };
        umlaut_o: umlaut_o {
            compatible = "zmk,behavior-macro";
            label = "UMLAUT_O";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp O>;
        };
        umlaut_u: umlaut_u {
            compatible = "zmk,behavior-macro";
            label = "UMLAUT_U";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp U>;
        };
        umlaut_s: umlaut_s {
            compatible = "zmk,behavior-macro";
            label = "UMLAUT_S";
            #binding-cells = <0>;
            bindings = <&kp RA(S)>;
        };
        umlaut_A: umlaut_A {
            compatible = "zmk,behavior-macro";
            label = "UMLAUT_A";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp LS(A)>;
        };
        umlaut_O: umlaut_O {
            compatible = "zmk,behavior-macro";
            label = "UMLAUT_O";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp LS(O)>;
        };
        umlaut_U: umlaut_U {
            compatible = "zmk,behavior-macro";
            label = "UMLAUT_U";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp LS(U)>;
        };
        real_d_quotes: real_d_quotes {
            compatible = "zmk,behavior-macro";
            label = "REAL_D_QUOTES";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp SPACE>;
        };
        real_s_quote: real_s_quote {
            compatible = "zmk,behavior-macro";
            label = "REAL_S_QUOTE";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp SPACE>;
        };
        real_grave: real_grave {
            compatible = "zmk,behavior-macro";
            label = "REAL_GRAVE";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp SPACE>;
        };
        real_caret: real_caret {
            compatible = "zmk,behavior-macro";
            label = "REAL_CARET";
            #binding-cells = <0>;
            bindings = <&kp CARET &kp SPACE>;
        };
        real_tilde: real_tilde {
            compatible = "zmk,behavior-macro";
            label = "REAL_TILDE";
            #binding-cells = <0>;
            bindings = <&kp TILDE &kp SPACE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
&kp COMMA  &kp V   &kp L              &kp C              &kp W       &kp K  &kp H   &kp G  &kp F  &kp DOT
    &kp U  &kp I   &kp A              &kp E              &kp O       &kp S  &kp N   &kp R  &kp T    &kp D
    &kp X  &kp P   &kp M              &kp Y  &kp DOUBLE_QUOTES   &kp SLASH  &kp Z   &kp B  &kp J    &kp Q
                  &trans  &num_activate 1 0          &kp SPACE  &tap_shift  &mo 2  &trans
            >;

            sensor-bindings =
                <&inc_dec_mwh SCROLL_DOWN SCROLL_UP>,
                <&inc_dec_kp LS(LC(R)) U>;
        };

        numbers {
            bindings = <
&kp COMMA  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &tap_currency  &kp PERIOD     &trans  &kp N7  &kp N8  &kp N9  &kp N0
   &trans             &kp MINUS               &kp PLUS      &kp EQUAL      &trans  &kp COLON  &kp N4  &kp N5  &kp N6  &trans
   &trans             &kp POUND           &kp ASTERISK    &kp PERCENT      &trans   &kp FSLH  &kp N1  &kp N2  &kp N3  &trans
                                                &trans         &trans      &trans     &trans  &trans  &trans
            >;
        };

        symbols {
            bindings = <
&kp COMMA  &kp LESS_THAN  &kp GREATER_THAN  &tap_currency          &kp GRAVE      &kp CARET  &kp SEMICOLON      &kp LEFT_BRACKET      &kp RIGHT_BRACKET     &kp PERIOD
 &kp EXCL      &kp MINUS          &kp PLUS      &kp EQUAL   &kp SINGLE_QUOTE  &kp AMPERSAND      &kp COLON  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS   &kp QUESTION
&kp TILDE      &kp POUND      &kp ASTERISK    &kp PERCENT  &kp DOUBLE_QUOTES      &kp SLASH         &kp AT        &kp LEFT_BRACE        &kp RIGHT_BRACE  &kp BACKSLASH
                                    &trans         &trans             &trans         &trans         &trans                &trans
            >;
        };

        navigation {
            bindings = <
&trans   &kp LEFT     &kp UP  &kp RIGHT     &trans  &trans  &kp N7  &kp N8  &kp N9  &kp N0
 &mo 4     &trans   &kp DOWN     &trans  &kp LC(Y)  &trans  &kp N4  &kp N5  &kp N6  &trans
&trans  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(Z)  &trans  &kp N1  &kp N2  &kp N3  &trans
                      &trans     &trans     &trans  &trans  &trans  &trans
            >;
        };

        function {
            bindings = <
&none  &none  &none  &out OUT_BLE       &bt BT_SEL 0  &none  &kp F7  &kp F8  &kp F9  &kp F10
&none  &none  &none  &out OUT_USB       &bt BT_SEL 1  &none  &kp F4  &kp F5  &kp F6  &kp F11
&none  &none  &none         &none  &confirm_bt_reset  &none  &kp F1  &kp F2  &kp F3  &kp F12
              &none         &none              &none  &none   &none   &none
            >;
        };
    };
};
