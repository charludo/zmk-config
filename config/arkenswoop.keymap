/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

/ {
    behaviors {
        inc_dec_mwh: rotate_mouse_wheel {
            compatible = "zmk,behavior-sensor-rotate-var";
            label = "ENC_MOUSE_WHEEL";
            #sensor-binding-cells = <2>;
            bindings =
                <&mwh>,
                <&mwh>;
        };
        num_word: behavior_num_word {
            compatible = "zmk,behavior-caps-word";
            label = "NUM_WORD";
            #binding-cells = <0>;
            layers = <2>;
            continue-list = <TAB BACKSPACE DELETE DOT COMMA LPAR RPAR STAR PLUS MINUS SLASH COLON COMMA PERIOD POUND PERCENT>;
            ignore-numbers;
        };
        num_activate: num_activate {
            compatible = "zmk,behavior-hold-tap";
            label = "NUM_ACTIVATE";
            bindings =
                <&mo>,
                <&num_word>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            global-quick-tap;
        };
        tap_currency: tap_currency {
            compatible = "zmk,behavior-tap-dance";
            label = "TAP_CURRENCY";
            #binding-cells = <0>;
            bindings =
                <&kp DOLLAR>,
                <&kp RA(NUMBER_5)>;
        };
        confirm_bt_reset: confirm_bt_reset {
            compatible = "zmk,behavior-tap-dance";
            label = "CONFIRM_BT_RESET";
            #binding-cells = <0>;
            bindings =
                <&none>,
                <&none>,
                <&none>,
                <&none>,
                <&none>,
                <&none>,
                <&none>,
                <&none>,
                <&none>,
                <&bt BT_CLR>;
        };
        mod_d_quotes: mod_d_quotes {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_D_QUOTES";
            bindings =
                <&real_d_quotes>,
                <&kp DOUBLE_QUOTES>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };
        mod_s_quote: mod_s_quote {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_S_QUOTE";
            bindings =
                <&real_s_quote>,
                <&kp SINGLE_QUOTE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };
        mod_grave: mod_grave {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_GRAVE";
            bindings =
                <&real_grave>,
                <&kp GRAVE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };
        mod_caret: mod_caret {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_CARET";
            bindings =
                <&real_caret>,
                <&kp CARET>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };
        mod_tilde: mod_tilde {
            compatible = "zmk,behavior-mod-morph";
            label = "MOD_TILDE";
            bindings =
                <&real_tilde>,
                <&kp TILDE>;

            #binding-cells = <0>;
            mods = <(MOD_LALT)>;
        };
        nav_activate: nav_activate {
            compatible = "zmk,behavior-hold-tap";
            label = "NAV_ACTIVATE";
            bindings =
                <&mo>,
                <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
        shift_activate: shift_activate {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_ACTIVATE";
            bindings =
                <&kp>,
                <&caps_word>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
        symbol_activate: symbol_activate {
            compatible = "zmk,behavior-hold-tap";
            label = "SYMBOL_ACTIVATE";
            bindings =
                <&mo>,
                <&key_repeat>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    combos {
        compatible = "zmk,combos";

        combo_a {
            bindings = <&umlaut_a>;
            key-positions = <13 12>;
            layers = <0>;
        };

        combo_as {
            bindings = <&umlaut_as>;
            key-positions = <13 12 33>;
            layers = <0>;
        };

        combo_o {
            bindings = <&umlaut_o>;
            key-positions = <13 14>;
            layers = <0>;
        };

        combo_os {
            bindings = <&umlaut_os>;
            key-positions = <13 14 33>;
            layers = <0>;
        };

        combo_u {
            bindings = <&umlaut_u>;
            key-positions = <13 10>;
            layers = <0>;
        };

        combo_us {
            bindings = <&umlaut_us>;
            key-positions = <13 10 33>;
            layers = <0>;
        };

        combo_s {
            bindings = <&umlaut_s>;
            key-positions = <13 15>;
            layers = <0>;
        };

        combo_ctrl_left {
            bindings = <&kp LCTRL>;
            key-positions = <13 23>;
        };

        combo_ctrl_right {
            bindings = <&kp LCTRL>;
            key-positions = <16 26>;
        };

        combo_alt_left {
            bindings = <&kp LALT>;
            key-positions = <12 22>;
        };

        combo_alt_right {
            bindings = <&kp LALT>;
            key-positions = <17 27>;
        };

        combo_meta_left {
            bindings = <&kp LMETA>;
            key-positions = <11 21>;
        };

        combo_meta_right {
            bindings = <&kp LMETA>;
            key-positions = <18 28>;
        };

        combo_enter {
            bindings = <&kp ENTER>;
            key-positions = <16 17 18>;
        };

        combo_tab {
            bindings = <&trans>;
            key-positions = <11 12 13>;
        };

        combo_escape {
            bindings = <&kp ESCAPE>;
            key-positions = <11 12 10>;
        };

        combo_backspace {
            bindings = <&kp BACKSPACE>;
            key-positions = <17 18 19>;
        };

        combo_delete_left {
            bindings = <&kp DELETE>;
            key-positions = <0 1 2>;
        };

        combo_delete_right {
            bindings = <&kp DELETE>;
            key-positions = <7 8 9>;
        };

        combo_questionmark {
            bindings = <&kp QUESTION>;
            key-positions = <19 29>;
            layers = <0>;
        };

        combo_exclamationmark {
            bindings = <&kp EXCLAMATION>;
            key-positions = <10 20>;
            layers = <0>;
        };

        combo_colon {
            bindings = <&kp COLON>;
            key-positions = <5 15>;
            layers = <0>;
        };

        combo_s_quote {
            bindings = <&real_s_quote>;
            key-positions = <4 14>;
            layers = <0>;
        };

        combo_paren_left {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <20 21 22>;
            layers = <0 1 2>;
        };

        combo_paren_right {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <27 28 29>;
            layers = <0 1 2>;
        };
    };

    macros {
        umlaut_a: umlaut_a {
            compatible = "zmk,behavior-macro";
            label = "UMLAUT_A";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp A>;
        };
        umlaut_o: umlaut_o {
            compatible = "zmk,behavior-macro";
            label = "UMLAUT_O";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp O>;
        };
        umlaut_u: umlaut_u {
            compatible = "zmk,behavior-macro";
            label = "UMLAUT_U";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp U>;
        };
        umlaut_s: umlaut_s {
            compatible = "zmk,behavior-macro";
            label = "UMLAUT_S";
            #binding-cells = <0>;
            bindings = <&kp RA(S)>;
        };
        umlaut_as: umlaut_as {
            compatible = "zmk,behavior-macro";
            label = "UMLAUT_AS";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp LS(A)>;
        };
        umlaut_os: umlaut_os {
            compatible = "zmk,behavior-macro";
            label = "UMLAUT_OS";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp LS(O)>;
        };
        umlaut_us: umlaut_us {
            compatible = "zmk,behavior-macro";
            label = "UMLAUT_US";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp LS(U)>;
        };
        real_d_quotes: real_d_quotes {
            compatible = "zmk,behavior-macro";
            label = "REAL_D_QUOTES";
            #binding-cells = <0>;
            bindings = <&kp DQT &kp SPACE>;
        };
        real_s_quote: real_s_quote {
            compatible = "zmk,behavior-macro";
            label = "REAL_S_QUOTE";
            #binding-cells = <0>;
            bindings = <&kp SQT &kp SPACE>;
        };
        real_grave: real_grave {
            compatible = "zmk,behavior-macro";
            label = "REAL_GRAVE";
            #binding-cells = <0>;
            bindings = <&kp GRAVE &kp SPACE>;
        };
        real_caret: real_caret {
            compatible = "zmk,behavior-macro";
            label = "REAL_CARET";
            #binding-cells = <0>;
            bindings = <&kp CARET &kp SPACE>;
        };
        real_tilde: real_tilde {
            compatible = "zmk,behavior-macro";
            label = "REAL_TILDE";
            #binding-cells = <0>;
            bindings = <&kp TILDE &kp SPACE>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default {
            bindings = <
&kp COMMA  &kp V   &kp L              &kp C                  &kp W                     &kp K                 &kp H   &kp G  &kp F  &kp DOT
    &kp U  &kp I   &kp A              &kp E                  &kp O                     &kp S                 &kp N   &kp R  &kp T    &kp D
    &kp X  &kp P   &kp M              &kp Y         &real_d_quotes                 &kp SLASH                 &kp Z   &kp B  &kp J    &kp Q
                  &trans  &num_activate 1 0  &nav_activate 3 SPACE  &shift_activate LSHIFT 0  &symbol_activate 2 0  &trans
            >;

            sensor-bindings =
                <&inc_dec_mwh SCROLL_VERT(100) SCROLL_VERT(-100)>,
                <&inc_dec_kp RIGHT LEFT>;
        };

        numbers {
            bindings = <
&kp COMMA     &trans        &trans  &tap_currency  &kp PERIOD    &trans  &kp N7  &kp N8  &kp N9  &kp N0
   &trans  &kp MINUS      &kp PLUS      &kp EQUAL      &trans    &trans  &kp N4  &kp N5  &kp N6  &trans
   &trans  &kp POUND  &kp ASTERISK    &kp PERCENT      &trans  &kp FSLH  &kp N1  &kp N2  &kp N3  &trans
                            &trans         &trans      &trans    &trans  &trans  &trans
            >;

            sensor-bindings =
                <&inc_dec_kp DOWN_ARROW UP_ARROW>,
                <&inc_dec_kp RIGHT LEFT>;
        };

        symbols {
            bindings = <
 &kp COMMA  &kp LESS_THAN  &kp GREATER_THAN  &tap_currency     &mod_grave     &mod_caret  &kp SEMICOLON      &kp LEFT_BRACKET      &kp RIGHT_BRACKET     &kp PERIOD
  &kp EXCL      &kp MINUS          &kp PLUS      &kp EQUAL   &mod_s_quote  &kp AMPERSAND      &kp COLON  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS   &kp QUESTION
&mod_tilde      &kp POUND      &kp ASTERISK    &kp PERCENT  &mod_d_quotes      &kp SLASH         &kp AT        &kp LEFT_BRACE        &kp RIGHT_BRACE  &kp BACKSLASH
                                     &trans         &trans         &trans         &trans         &trans                &trans
            >;

            sensor-bindings =
                <&inc_dec_kp DOWN_ARROW UP_ARROW>,
                <&inc_dec_kp RIGHT LEFT>;
        };

        navigation {
            bindings = <
&trans   &kp LEFT     &kp UP  &kp RIGHT     &trans  &trans  &kp N7  &kp N8  &kp N9  &kp N0
 &mo 4     &trans   &kp DOWN     &trans  &kp LC(Y)  &trans  &kp N4  &kp N5  &kp N6  &trans
&trans  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(Z)  &trans  &kp N1  &kp N2  &kp N3  &trans
                      &trans     &trans     &trans  &trans  &trans  &trans
            >;

            sensor-bindings =
                <&inc_dec_kp DOWN_ARROW UP_ARROW>,
                <&inc_dec_kp RIGHT LEFT>;
        };

        function {
            bindings = <
&kp PRINTSCREEN  &none  &none  &out OUT_BLE       &bt BT_SEL 0  &none  &kp F7      &kp F8  &kp F9  &kp F10
          &none  &none  &none  &out OUT_USB       &bt BT_SEL 1  &none  &kp F4      &kp F5  &kp F6  &kp F11
          &none  &none  &none         &none  &confirm_bt_reset  &none  &kp F1      &kp F2  &kp F3  &kp F12
                        &none         &none              &none  &none   &none  &kp K_MUTE
            >;

            sensor-bindings =
                <&inc_dec_kp DOWN_ARROW UP_ARROW>,
                <&inc_dec_kp C_VOLUME_UP C_VOLUME_DOWN>;
        };
    };
};

&mwh {
    delay-ms = <0>;
    acceleration-exponent = <1>;
    time-to-max-speed-ms = <0>;
};
